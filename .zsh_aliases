SFUI_DIR="~/github/qpp-submission-client"
SFAPI_DIR="~/github/qpp-submissions-api"

alias reload="source ~/.zshrc ~/.zshenv"
alias sshfix="ssh-add --apple-use-keychain ~/.ssh/id_rsa"
alias vim="nvim"


alias format-modified="gscut | xargs npx prettier --write"
alias unmerged="git diff --name-only --diff-filter=U --relative"

#configs
alias zrc="nvim ~/.zshrc"
alias zenv="nvim ~/.zshenv"
alias zalias="nvim ~/.zsh_aliases"
alias vrc="nvim ~/.config/nvim/init.vim"

alias qsc="cd ${SFUI_DIR}"
alias qsa="cd ${SFAPI_DIR}"
alias qs="cd ~/github/qpp-style"
alias qss="cd ~/github/qpp-submission-server"
alias dotfiles="cd ~/github/dotfiles"
alias qmr="cd ~/qpp-mock-responses"
alias gscut="git status -s | cut -c4-"
alias fzadd="git status -s | cut -c4- | fzf -m | xargs git add"
alias fzreset="git status -s | cut -c4- | fzf -m | xargs git reset"
alias fzco="git branch | fzf | xargs git checkout"
alias prname="git branch --show-current | pbcopy && git branch --show-current"
alias version="jq -r '.version' package.json"
alias notes="nvim ~/notes"

alias search-edit="fd --type f --hidden --exclude .git | fzf-tmux -p --reverse | xargs nvim"

#jira cli
alias cp-jira="jira issue list -a$(jira me) -s\"In Progress\" --plain | grep -v \"KEY\" | fzf | awk '{print \$2}' | xargs echo"
alias jira-me="jira issue list -a$(jira me) -s\"In Progress\" -s\"Verified\" -s\"Open\""
alias reconcile-fix="jira issue list -a$(jira me) -s\"In Progress\" -s\"Verified\" -s\"Open\" -s\"Ready To Deploy\" -s\"Verify in IMPL\" -q \"fixVersion IS EMPTY\""

alias onpush="gh gist clone https://gist.github.com/petemckinneysb/1dc811e1d0f895726a6270a25a5d18e7 gist && cat gist/*.ts | pbcopy && rm -rf gist"
alias sessions="ls ~/vim-sessions | grep vim | fzf | pbcopy"
alias open_ticket="extract_ticket | xargs -I {} jira open {}"


#aws cli stuff
recent_build() {
  local build_id=$(aws codebuild list-builds-for-project --project-name "$IMPL_SFUI_BUILD_NAME" --sort-order DESCENDING --max-items 1 | jq -r '.ids[]' )

  local sourceVersion=$(aws codebuild batch-get-builds --ids $build_id --query 'builds[].resolvedSourceVersion' | jq -r '.[0]')

  echo "$sourceVersion"
}

tickets_released() {
  local commit=$(recent_build)
  log=$(git log $commit...HEAD --oneline)

  declare -a tickets

  while IFS= read -r line; do
    ticket_number=$(echo ${line:l} | grep -Eo 'qppsf(\s*|-)[0-9]*')
    tickets+="$ticket_number"
  done <<< "$log"

  for ticket in "${tickets[@]}"; do
    echo "https://jira.cms.gov/browse/${ticket:u}"
  done
}

#git 
new_branch() {
  local ticket_number=$(jira-me --plain | fzf | grep -o 'QPPSF-[0-9]*')
  echo"$ticket_number" 
  echo "Please enter a branch prefix"
  read branch_prefix

  echo "Please enter a branch description"
  read branch_description

  git checkout -b "$branch_prefix/$ticket_number-$branch_description"
}

parse_git_log() {
  if [ -z "$1" ]; then
    echo "Please provide base branch to parse git log"
    return 1
  fi

  local base_branch=$1
  local current_branch=$(git rev-parse --abbrev-ref HEAD)

  log=$(git log "origin/$base_branch"..$current_branch)

  declare -a pr_logs

  while IFS= read -r line; do
    if [[ "$line" != "commit"* ]] && [[ "$line" != "Author:"* ]] && [[ "$line" != "Date:"* ]] && [[ "$line" != *"QPPSF-"* ]]; then
      pr_logs+="$line\n"
    fi
  done <<< "$log"

  echo "$pr_logs"
}

#gh cli
alias gist-modified="git ls-files --modified | xargs gh gist create"

extract_ticket() {
  local branch=$(git rev-parse --abbrev-ref HEAD)
  local branch=${branch#*/}; 
  local array=(${(s/-/)branch}); 

  echo "${array[1]}-${array[2]}"
}

jira_move() {
  read input
  if [ -z "$input" ]; then
    echo "Please provide an issue #"
    return 1
  fi

  jira issue move $input "Verified"
}

jira_move_ticket() {
  { extract_ticket | jira_move }
}
                                                
#gh related zsh functions
gh_cli_create_pr() {
  if [ -z "$1" ]; then
    echo "Please provide a base branch."
    return 1
  fi

  local base_branch="$1"
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local title=$(git branch --show-current | pbcopy && git branch --show-current)


  local pr_log=$(parse_git_log $1)
  PR_BODY=$(generate_pr_template $pr_log)

  echo "$PR_BODY"

  # Creating a new PR with the specified base branch using GitHub CLI
  gh pr create --base "$base_branch" --head "$current_branch" --title="$title" --body "$PR_BODY"
}

update_fix_version() {
  local fix_version=$(get_fix_version)
  local ticket=$(extract_ticket)
  jira issue edit "$ticket" --fix-version "UI $fix_version" --no-input
}

get_fix_version() {
  jq -r '.version' package.json
}

generate_pr_template() {
  if [ -z "$1" ]; then
    echo "Please provide log to generate pr_template"
    return 1
  fi

  local template_string=$(cat .github/PULL_REQUEST_TEMPLATE.md)
  ticket=$(extract_ticket)
  jira_link="https://jira.cms.gov/browse/$ticket"

  template_string=${template_string/"https:\/\/jira.cms.gov\/browse\/QPPSF-"/$jira_link}
  template_string=${template_string/"<!-- A detailed multi line description of the PR. -->"/$1}

  echo $template_string
}

pr_ready() {
  gh_cli_create_pr $1 && jira_move_ticket && update_fix_version && $(gh pr view --web)
}

pr_dry_run() {
  if [ -z "$1" ]; then
    echo "Please provide a base branch."
    return 1
  fi

  local base_branch="$1"
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local title=$(git branch --show-current | pbcopy && git branch --show-current)


  local pr_log=$(parse_git_log $1)
  PR_BODY=$(generate_pr_template $pr_log)

  echo "$PR_BODY"
}

# metrics
previous_sprint() {
  echo "$(jira sprint list --state closed --table | head -n 2)"
}

previous_sprint_dates() {
  local dates=$(previous_sprint | tail -n 1 | awk '{print $6, $8}')

  local datesArray=(${(s: :)dates})
  local startDate=$datesArray[1]
  local endDate=$datesArray[2]

  echo $startDate $endDate
}

lines_of_code() {
  local cloc_output=$(cloc --exclude-dir="node_modules,dist,coverage,cis-metrics,.idea,.angular,.vscode,local-mock-data" .)
  parse_cloc_sum_line $cloc_output
}

deployment_lines_of_code() {
  local cloc_output=$(cloc "./Deploy/codebuild/buildspecs/buildspec.yml")
  parse_cloc_sum_line $cloc_output
}

parse_cloc_sum_line() {
  local sum_line=$(echo "$1" | tail -n 2 | head -n 1)
  echo "$(echo "$sum_line" | awk '{print $NF}')"
}

unit_test_coverage() {
  local coverage_output=$(npm run coverage)
  local coverage_line=$(cat "./coverage/lcov-report/lcov-report/index.html" | head -n 47 | tail -n 1)

  echo -n "$coverage_line" | sed 's/.*>\(.*\)% <.*/\1/'
}

prod_builds() {
  local build_output=$(aws codebuild batch-get-builds --ids $(aws codebuild list-builds-for-project --project-name "$PROD_SFUI_BUILD_NAME" --sort-order DESCENDING | jq -r ".ids[]"))

  local builds_in_range=$(echo "$build_output" | jq "[.builds[] | select(.startTime >= \"$1\" and .startTime <= \"$2\" and .endTime <= \"$2\" and .buildStatus == \"SUCCEEDED\")"])
  local builds_array=$(echo "$builds_in_range" | jq "[.[] | {id, startTime, buildStatus, resolvedSourceVersion}]")

  echo "$builds_array" | jq -r
}

gather_metrics() {
  local dates=("${(@s/ /)$(previous_sprint_dates)}")

  local startDate=$dates[1]
  local endDate=$dates[2]

  git checkout `git rev-list -1 --before="$dates[2]" HEAD origin/develop`

  lines=$(lines_of_code)
  deployment_lines=$(deployment_lines_of_code)
  test_coverage=$(unit_test_coverage)

  local builds_array=$(prod_builds $startDate $endDate) 
  local prod_count=$(echo "$builds_array" | jq 'length')

  clear
  echo "$(previous_sprint | tail -n 1 | awk '{print $2 $3 $4 $5}')\n"
  echo "Lines of code: $lines"
  echo "Unit Test Coverage: $test_coverage"
  echo "Deployment lines of code: $deployment_lines"
  echo "Production Deployments: $prod_count"

  open "$SONAR_CLOUD_URL"
  open "$METRICS_SPREADSHEET_URL"
  open "$METRICS_CONFLUENCE_URL"
}
