#git 

#prints any branches not currently assigned to me (not master not develop)
# for use with piping to:  | xargs git branch -D
clean_branches() {
  current_branch=$(git branch --show-current)
  tickets=$(jira-me --plain | sed '1d' | awk '{print $2}')
  branches=$(git --no-pager branch | grep -v "master\|develop\|$current_branch")

  for ticket in "${tickets[@]}"; do
    filtered_branches=$(echo "$branches" | grep -i "$ticket")
  done

  echo "Keeping the following branches \n$filtered_branches"

  regex=$(printf '|%s' "${filtered_branches}")
  regex="${regex:1}"
  branches_to_delete=$(echo "$branches" | grep -v -E -i "$regex")

  echo "$branches_to_delete" 
}

new_branch() {
  local ticket_number=$(jira-me --plain | fzf | grep -o 'QPPSF-[0-9]*')
  echo"$ticket_number" 
  echo "Please enter a branch prefix"
  read branch_prefix

  echo "Please enter a branch description"
  read branch_description

  git checkout -b "$branch_prefix/$ticket_number-$branch_description"
}

parse_git_log() {
  if [ -z "$1" ]; then
    echo "Please provide base branch to parse git log"
    return 1
  fi

  local base_branch=$1
  local current_branch=$(git rev-parse --abbrev-ref HEAD)

  log=$(git log "origin/$base_branch"..$current_branch)

  declare -a pr_logs

  while IFS= read -r line; do
    if [[ "$line" != "commit"* ]] && [[ "$line" != "Author:"* ]] && [[ "$line" != "Date:"* ]] && [[ "$line" != *"QPPSF-"* ]]; then
      pr_logs+="$line\n"
    fi
  done <<< "$log"

  echo "$pr_logs"
}

#gh related zsh functions
gh_cli_create_pr() {
  if [ -z "$1" ]; then
    echo "Please provide a base branch."
    return 1
  fi

  local base_branch="$1"
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local title=$(git branch --show-current | pbcopy && git branch --show-current)


  local pr_log=$(parse_git_log $1)
  PR_BODY=$(generate_pr_template $pr_log)

  echo "$PR_BODY"

  # Creating a new PR with the specified base branch using GitHub CLI
  gh pr create --base "$base_branch" --head "$current_branch" --title="$title" --body "$PR_BODY"
}

extract_ticket() {
  local branch=$(git rev-parse --abbrev-ref HEAD)
  local branch=${branch#*/}; 
  local array=(${(s/-/)branch}); 

  echo "${array[1]}-${array[2]}"
}

jira_move() {
  read input
  if [ -z "$input" ]; then
    echo "Please provide an issue #"
    return 1
  fi

  jira issue move $input "Verified"
}

jira_move_ticket() {
  { extract_ticket | jira_move }
}

update_fix_version() {
  local fix_version=$(get_fix_version)
  local ticket=$(extract_ticket)
  jira issue edit "$ticket" --fix-version "UI $fix_version" --no-input
}

get_fix_version() {
  jq -r '.version' package.json
}

generate_pr_template() {
  if [ -z "$1" ]; then
    echo "Please provide log to generate pr_template"
    return 1
  fi

  local template_string=$(cat .github/PULL_REQUEST_TEMPLATE.md)
  ticket=$(extract_ticket)
  jira_link="https://jira.cms.gov/browse/$ticket"

  template_string=${template_string/"https:\/\/jira.cms.gov\/browse\/QPPSF-"/$jira_link}
  template_string=${template_string/"<!-- A detailed multi line description of the PR. -->"/$1}

  echo $template_string
}

pr_ready() {
  gh_cli_create_pr $1 && jira_move_ticket && update_fix_version && $(gh pr view --web)
}

pr_dry_run() {
  if [ -z "$1" ]; then
    echo "Please provide a base branch."
    return 1
  fi

  local base_branch="$1"
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local title=$(git branch --show-current | pbcopy && git branch --show-current)


  local pr_log=$(parse_git_log $1)
  PR_BODY=$(generate_pr_template $pr_log)

  echo "$PR_BODY"
}
